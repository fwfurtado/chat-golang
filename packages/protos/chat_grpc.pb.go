// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationServiceClient interface {
	ListConversations(ctx context.Context, in *FilterByParticipant, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*ConversationSummary, error)
	PullUnreadMessages(ctx context.Context, in *FilterConversationByOwner, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	ListenMessages(ctx context.Context, in *FilterMessages, opts ...grpc.CallOption) (ConversationService_ListenMessagesClient, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) ListConversations(ctx context.Context, in *FilterByParticipant, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, "/chat.ConversationService/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*ConversationSummary, error) {
	out := new(ConversationSummary)
	err := c.cc.Invoke(ctx, "/chat.ConversationService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) PullUnreadMessages(ctx context.Context, in *FilterConversationByOwner, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/chat.ConversationService/PullUnreadMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) ListenMessages(ctx context.Context, in *FilterMessages, opts ...grpc.CallOption) (ConversationService_ListenMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[0], "/chat.ConversationService/ListenMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &conversationServiceListenMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConversationService_ListenMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type conversationServiceListenMessagesClient struct {
	grpc.ClientStream
}

func (x *conversationServiceListenMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations should embed UnimplementedConversationServiceServer
// for forward compatibility
type ConversationServiceServer interface {
	ListConversations(context.Context, *FilterByParticipant) (*ListConversationsResponse, error)
	CreateConversation(context.Context, *CreateConversationRequest) (*ConversationSummary, error)
	PullUnreadMessages(context.Context, *FilterConversationByOwner) (*ListMessagesResponse, error)
	ListenMessages(*FilterMessages, ConversationService_ListenMessagesServer) error
}

// UnimplementedConversationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationServiceServer struct {
}

func (UnimplementedConversationServiceServer) ListConversations(context.Context, *FilterByParticipant) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedConversationServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*ConversationSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationServiceServer) PullUnreadMessages(context.Context, *FilterConversationByOwner) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUnreadMessages not implemented")
}
func (UnimplementedConversationServiceServer) ListenMessages(*FilterMessages, ConversationService_ListenMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenMessages not implemented")
}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterByParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).ListConversations(ctx, req.(*FilterByParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_PullUnreadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterConversationByOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).PullUnreadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/PullUnreadMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).PullUnreadMessages(ctx, req.(*FilterConversationByOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_ListenMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterMessages)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServiceServer).ListenMessages(m, &conversationServiceListenMessagesServer{stream})
}

type ConversationService_ListenMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type conversationServiceListenMessagesServer struct {
	grpc.ServerStream
}

func (x *conversationServiceListenMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConversations",
			Handler:    _ConversationService_ListConversations_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _ConversationService_CreateConversation_Handler,
		},
		{
			MethodName: "PullUnreadMessages",
			Handler:    _ConversationService_PullUnreadMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenMessages",
			Handler:       _ConversationService_ListenMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packages/protos/chat.proto",
}
